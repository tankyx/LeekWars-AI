// Lightweight AI for low-level leeks
// Focuses on minimal operations: move toward nearest enemy and fire a cheap weapon.

function main() {
    var enemy = getNearestEnemy();
    if (enemy == null) {
        return;
    }

    var weapons = getWeapons();
    var weapon = selectLightweightWeapon(weapons);

    if (weapon == null) {
        // No weapon equipped â€“ try a simple chip fallback
        useLightweightChip(enemy);
        return;
    }

    // Move until we can shoot or we run out of MP
    ensureWeaponRange(weapon, enemy);

    // Switch weapon if needed
    if (getWeapon() != weapon && getTP() > 0) {
        if (setWeapon(weapon)) {
            // Weapon changed successfully
        }
    }

    // Fire as many times as possible
    fireWeaponAt(weapon, enemy);
}

function selectLightweightWeapon(weapons) {
    if (weapons == null || count(weapons) == 0) return null;
    var priorities = [WEAPON_PISTOL, WEAPON_SWORD, WEAPON_MAGNUM, WEAPON_B_LASER, WEAPON_RIFLE];
    for (var i = 0; i < count(priorities); i++) {
        if (inArray(weapons, priorities[i])) {
            return priorities[i];
        }
    }
    return weapons[0];
}

function ensureWeaponRange(weapon, enemy) {
    var minRange = getWeaponMinRange(weapon);
    var maxRange = getWeaponMaxRange(weapon);
    while (getMP() > 0) {
        var myCell = getCell();
        var enemyCell = getCell(enemy);
        if (enemyCell == null) {
            break;
        }
        var dist = getCellDistance(myCell, enemyCell);
        if (dist >= minRange && dist <= maxRange) {
            break;
        }
        if (dist > maxRange) {
            var before = getMP();
            moveTowardCell(enemyCell);
            if (getMP() == before) {
                break;
            }
        } else {
            break;
        }
    }
}

function fireWeaponAt(weapon, enemy) {
    var cost = getWeaponCost(weapon);
    var maxUses = getWeaponMaxUses(weapon);
    var uses = 0;
    while (getTP() >= cost && (maxUses == 0 || uses < maxUses)) {
        var myCell = getCell();
        var enemyCell = getCell(enemy);
        var dist = getCellDistance(myCell, enemyCell);
        if (dist < getWeaponMinRange(weapon) || dist > getWeaponMaxRange(weapon)) break;
        useWeapon(enemy);
        uses++;
        if (maxUses > 0 && uses >= maxUses) break;
    }
}

function useLightweightChip(enemy) {
    var chips = getChips();
    if (chips == null || count(chips) == 0) return;
    if (inArray(chips, CHIP_LIGHTNING) && getTP() >= 4) {
        useChip(CHIP_LIGHTNING, enemy);
    } else if (inArray(chips, CHIP_SPARK) && getTP() >= 3) {
        useChip(CHIP_SPARK, enemy);
    }
}
