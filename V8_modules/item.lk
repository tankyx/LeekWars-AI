/** ExportÃ© le 10/1/2025, 2:44:49 PM **/

/** 8.0/V8/item.lk **/

class EffectsInfos {
    _minEffectAmount = 0
    _maxEffectAmount = 0
    _effectDuration = 0
}

class Item {
    _id = -1
    _minRange = 0
    _maxRange = 0
    _cost = 0
    _maxUse = 0
    _launchType = -1
    _aoeType = -1
    _effects = [:]

    constructor(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType) {
        _id = id
        _minRange = minRange
        _maxRange = maxRange
        _cost = cost
        _maxUse = maxUse
        _launchType = launchType
        _aoeType = aoeType

        parseAllEffects(effects)
    }

    parseAllEffects(effects) {
        for (var e in effects) {
            var effectsInfos = new EffectsInfos()
            effectsInfos._minEffectAmount += e[1]
            effectsInfos._maxEffectAmount += e[2]
            effectsInfos._effectDuration += e[3]

            mapPut(this._effects, e[0], effectsInfos)
        }
    }
}

class Weapon extends Item {
    constructor(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType) {
        super(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType)
    }
}

class Chip extends Item {
    cooldown = -1

    constructor(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType, cooldown) {
        super(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType)
        this.cooldown = cooldown
    }
}

class Arsenal {
    constructor() {
        buildAllWeaponsList()
        buildAllChipsList()
        getEquippedWeaponsSubMap()
        getEquippedChipsSubMap()
    }

    weaponsList = [:]
    chipsList = [:]
    playerEquippedWeapons = [:]
    playerEquippedChips = [:]

    buildAllWeaponsList() {
        var allWeapons = getAllWeapons()

        for (var w in allWeapons) {
            mapPut(weaponsList, w, new Weapon(
                w,
                getWeaponMinRange(w),
                getWeaponMaxRange(w),
                getWeaponEffects(w),
                getWeaponCost(w),
                getWeaponMaxUses(w),
                getWeaponLaunchType(w),
                getWeaponArea(w)
            ));
        }
    }

    buildAllChipsList() {
        var allChips = getAllChips()

        for (var c in allChips) {
            mapPut(chipsList, c, new Chip(
                c,
                getChipMinRange(c),
                getChipMaxRange(c),
                getChipEffects(c),
                getChipCost(c),
                getChipMaxUses(c),
                getChipLaunchType(c),
                getChipArea(c),
                getCooldown(c, getEntity())
            ));
        }
    }

    getEquippedWeaponsSubMap() {
        var equippedWeapons = getWeapons()

        for (var w in equippedWeapons) {
            mapPut(playerEquippedWeapons, w, weaponsList[w])
        }
    }

    getEquippedChipsSubMap() {
        var equippedChips = getChips()

        for (var c in equippedChips) {
            mapPut(playerEquippedChips, c, chipsList[c])
        }
    }

    // Helper: compute base damage (without lifesteal) from a map of effects
    computeEffectsBaseDamage(effectsMap, str, mag) {
        var total = 0
        for (var e in mapKeys(effectsMap)) {
            var info = effectsMap[e]
            if (e == EFFECT_DAMAGE) {
                var avg = (info._minEffectAmount + info._maxEffectAmount) / 2
                total += avg * (1 + (str / 100))
            } else if (e == EFFECT_POISON) {
                var avg2 = (info._minEffectAmount + info._maxEffectAmount) / 2
                var totalOverTime = avg2 * info._effectDuration
                total += totalOverTime * (1 + (mag / 100))
            }
        }
        return total
    }

    // Refactored: unified damage calculation for weapons and chips
    getScaledDamage(str, mag, wis, itemID) {
        var isWeapon = mapContainsKey(this.playerEquippedWeapons, itemID)
        var isChip = !isWeapon && mapContainsKey(this.chipsList, itemID) // fixed: use mapContainsKey

        if (!isWeapon && !isChip) {
            return -1
        }

        var item = isWeapon ? this.playerEquippedWeapons[itemID] : this.chipsList[itemID]
        var totalDamage = this.computeEffectsBaseDamage(item._effects, str, mag)

        // Lifesteal applies only to weapons (per original logic)
        if (isWeapon) {
            totalDamage += totalDamage * (wis / 1000)
        }
        return totalDamage
    }

    getHighestDamageWeapon() {
        var highestDmg = -1
        var highestDmgWeapon = null

        for (var w in mapKeys(this.playerEquippedWeapons)) {
            // Fixed argument order: (str, mag, wis, itemID)
            var dmg = this.getScaledDamage(player._strength, player._magic, player._wisdom, w)
            if (dmg > highestDmg) {
                highestDmg = dmg
                highestDmgWeapon = w
            }
        }

        return highestDmgWeapon
    }
}