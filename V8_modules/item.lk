class EffectsInfos {
    _minEffectAmount = 0
    _maxEffectAmount = 0
    _effectDuration = 0
}

class Item {
    _id = -1
    _minRange = 0
    _maxRange = 0
    _cost = 0
    _maxUse = 0
    _launchType = -1
    _aoeType = -1
    _effects = [:]

    constructor(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType) {
        _id = id
        _minRange = minRange
        _maxRange = maxRange
        _cost = cost
        _maxUse = maxUse
        _launchType = launchType
        _aoeType = aoeType

        parseAllEffects(effects)
    }

    parseAllEffects(effects) {
        for (var e in effects) {
            var effectsInfos = new EffectsInfos()
            effectsInfos._minEffectAmount += e[1]
            effectsInfos._maxEffectAmount += e[2]
            effectsInfos._effectDuration += e[3]

            mapPut(this._effects, e[0], effectsInfos)
        }
    }
}

class Weapon extends Item {
    constructor(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType) {
        super(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType)
    }
}

class Chip extends Item {
    cooldown = -1

    constructor(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType, cooldown) {
        super(id, minRange, maxRange, effects, cost, maxUse, launchType, aoeType)
        this.cooldown = cooldown
    }
}

class Arsenal {
    constructor() {
        buildAllWeaponsList()
        buildAllChipsList()
        getEquippedWeaponsSubMap()
        getEquippedChipsSubMap()
    }

    weaponsList = [:]
    chipsList = [:]
    playerEquippedWeapons = [:]
    playerEquippedChips = [:]

    buildAllWeaponsList() {
        var allWeapons = getAllWeapons()

        for (var w in allWeapons) {
            mapPut(weaponsList, w, new Weapon(
                w,
                getWeaponMinRange(w),
                getWeaponMaxRange(w),
                getWeaponEffects(w),
                getWeaponCost(w),
                getWeaponMaxUses(w),
                getWeaponLaunchType(w),
                getWeaponArea(w)
            ));
        }
    }

    buildAllChipsList() {
        var allChips = getAllChips()

        for (var c in allChips) {
            mapPut(chipsList, c, new Chip(
                c,
                getChipMinRange(c),
                getChipMaxRange(c),
                getChipEffects(c),
                getChipCost(c),
                getChipMaxUses(c),
                getChipLaunchType(c),
                getChipArea(c),
                getCooldown(c, getEntity())
            ));
        }
    }

    getEquippedWeaponsSubMap() {
        var equippedWeapons = getWeapons()

        for (var w in equippedWeapons) {
            mapPut(playerEquippedWeapons, w, weaponsList[w])
        }
    }

    getEquippedChipsSubMap() {
        var equippedChips = getChips()

        for (var c in equippedChips) {
            mapPut(playerEquippedChips, c, chipsList[c])
        }
    }

    // Helper: compute AoE damage modifier based on distance from impact center
    // Returns percentage multiplier (0.0 to 1.0) using formula: max(0, 1 - 0.2 * distance)
    computeAoEModifier(centerCell, targetCell, aoeType) {
        // AREA_POINT (0) has no AoE - only center cell takes damage
        if (aoeType == AREA_POINT) {
            return (centerCell == targetCell) ? 1.0 : 0.0
        }

        // For all AoE types, center cell always takes 100% damage
        if (centerCell == targetCell) return 1.0

        var dist = getCellDistance(centerCell, targetCell)
        if (dist == null) return 0.0

        // Apply linear falloff: percentage = max(0, 1 - 0.2 * distance)
        var percentage = 1.0 - 0.2 * dist
        if (percentage < 0) percentage = 0

        return percentage
    }

    // Helper: compute base damage (without lifesteal) from a map of effects
    // Optional aoeModifier parameter applies AoE falloff (default 1.0 = full damage)
    computeEffectsBaseDamage(effectsMap, str, mag, aoeModifier = 1.0) {
        var total = 0
        for (var e in mapKeys(effectsMap)) {
            var info = effectsMap[e]
            if (e == EFFECT_DAMAGE) {
                var avg = (info._minEffectAmount + info._maxEffectAmount) / 2
                total += avg * (1 + (str / 100)) * aoeModifier
            } else if (e == EFFECT_POISON) {
                var avg2 = (info._minEffectAmount + info._maxEffectAmount) / 2
                var totalOverTime = avg2 * info._effectDuration
                total += totalOverTime * (1 + (mag / 100)) * aoeModifier
            }
        }
        return total
    }

    // Refactored: unified damage calculation for weapons and chips
    getScaledDamage(str, mag, wis, itemID) {
        var isWeapon = mapContainsKey(this.playerEquippedWeapons, itemID)
        var isChip = !isWeapon && mapContainsKey(this.chipsList, itemID) // fixed: use mapContainsKey

        if (!isWeapon && !isChip) {
            return -1
        }

        var item = isWeapon ? this.playerEquippedWeapons[itemID] : this.chipsList[itemID]
        var totalDamage = this.computeEffectsBaseDamage(item._effects, str, mag)

        // Lifesteal applies only to weapons (per original logic)
        if (isWeapon) {
            totalDamage += totalDamage * (wis / 1000)
        }
        return totalDamage
    }

    // New: provide separate breakdown for direct (immediate) vs dot (poison) damage per use/apply
    // directPerUse: average base damage (EFFECT_DAMAGE) scaled by STR (and lifesteal not included here)
    // dotPerApply: total poison damage over duration (EFFECT_POISON) scaled by MAG (applies at most once per target realistically)
    // Optional parameters for AoE: centerCell (impact point), targetCell (cell taking damage)
    getDamageBreakdown(str, mag, wis, itemID, centerCell = -1, targetCell = -1) {
        // Support both full inventory lists and equipped subsets for weapons & chips.
        var isWeapon = mapContainsKey(this.playerEquippedWeapons, itemID)
        // A chip can reside either in the global chipsList or only in playerEquippedChips.
        var chipInFull = mapContainsKey(this.chipsList, itemID)
        var chipInEquipped = mapContainsKey(this.playerEquippedChips, itemID)
        var isChip = !isWeapon && (chipInFull || chipInEquipped)
        if (!isWeapon && !isChip) return ['direct': 0, 'dot': 0, 'total': 0]
        var item = isWeapon ? this.playerEquippedWeapons[itemID] : (chipInFull ? this.chipsList[itemID] : this.playerEquippedChips[itemID])

        // Calculate AoE modifier if both cells are provided
        var aoeModifier = 1.0
        if (centerCell != -1 && targetCell != -1) {
            aoeModifier = this.computeAoEModifier(centerCell, targetCell, item._aoeType)
        }

        var direct = 0
        var dot = 0
        for (var e in mapKeys(item._effects)) {
            var info = item._effects[e]
            if (e == EFFECT_DAMAGE) {
                var avg = (info._minEffectAmount + info._maxEffectAmount) / 2
                direct += avg * (1 + (str / 100)) * aoeModifier
            } else if (e == EFFECT_POISON) {
                var avg2 = (info._minEffectAmount + info._maxEffectAmount) / 2
                var totalOverTime = avg2 * info._effectDuration
                dot += totalOverTime * (1 + (mag / 100)) * aoeModifier
            }
        }
        return ['direct': direct, 'dot': dot, 'total': direct + dot]
    }

    // Return an array of poison chip objects sorted by descending dot damage
    getPoisonChipsSorted(str, mag, wis) {
        var arr = []
        for (var cid in mapKeys(this.playerEquippedChips)) {
            var chip = this.playerEquippedChips[cid]
            if (!mapContainsKey(chip._effects, EFFECT_POISON)) continue
            var bd = this.getDamageBreakdown(str, mag, wis, cid)
            push(arr, ['chip': chip, 'dot': bd['dot'], 'direct': bd['direct'], 'total': bd['total']])
        }
        // Simple selection sort (LeekScript lacks higher-order sort)
        var sorted = []
        while (count(arr) > 0) {
            var bestIdx = 0
            var bestDot = arr[0]['dot']
            for (var i = 1; i < count(arr); i++) {
                if (arr[i]['dot'] > bestDot) {
                    bestDot = arr[i]['dot']
                    bestIdx = i
                }
            }
            push(sorted, arr[bestIdx]['chip'])
            remove(arr, bestIdx)
        }
        return sorted
    }

    // Return DoT-capable weapons sorted by descending dot component; include pure direct if no dot weapons
    getDotWeaponsSorted(str, mag, wis) {
        var arr = []
        for (var wid in mapKeys(this.playerEquippedWeapons)) {
            var w = this.playerEquippedWeapons[wid]
            var bd = this.getDamageBreakdown(str, mag, wis, wid)
            if (bd['dot'] > 0) {
                push(arr, ['weapon': w, 'dot': bd['dot'], 'direct': bd['direct'], 'total': bd['total']])
            }
        }
        if (count(arr) == 0) {
            // fallback: use any weapons (direct focus)
            for (var wid2 in mapKeys(this.playerEquippedWeapons)) {
                var w2 = this.playerEquippedWeapons[wid2]
                var bd2 = this.getDamageBreakdown(str, mag, wis, wid2)
                push(arr, ['weapon': w2, 'dot': bd2['dot'], 'direct': bd2['direct'], 'total': bd2['total']])
            }
        }
        // selection sort by dot then total
        var sorted = []
        while (count(arr) > 0) {
            var bestIdx = 0
            var bestDot = arr[0]['dot']
            var bestTot = arr[0]['total']
            for (var i = 1; i < count(arr); i++) {
                if (arr[i]['dot'] > bestDot || (arr[i]['dot'] == bestDot && arr[i]['total'] > bestTot)) {
                    bestDot = arr[i]['dot']
                    bestTot = arr[i]['total']
                    bestIdx = i
                }
            }
            push(sorted, arr[bestIdx]['weapon'])
            remove(arr, bestIdx)
        }
        return sorted
    }

    // Calculate net damage against target accounting for shields
    // Poison/DoT damage bypasses shields entirely; direct damage is reduced by relative/absolute shields
    getNetDamageAgainstTarget(str, mag, wis, itemID, targetEntity) {
        var bd = this.getDamageBreakdown(str, mag, wis, itemID)
        var directDmg = bd['direct']
        var dotDmg = bd['dot']

        // Apply shields only to direct damage
        var relShield = targetEntity._relShield / 100  // Convert percentage to decimal
        var absShield = targetEntity._absShield

        var netDirect = directDmg * (1 - relShield) - absShield
        if (netDirect < 0) netDirect = 0  // Can't heal enemy

        // Poison bypasses shields completely
        return netDirect + dotDmg
    }

    getHighestDamageWeapon() {
        var highestDmg = -1
        var highestDmgWeapon = null

        for (var w in mapKeys(this.playerEquippedWeapons)) {
            // Fixed argument order: (str, mag, wis, itemID)
            var dmg = this.getScaledDamage(player._strength, player._magic, player._wisdom, w)
            if (dmg > highestDmg) {
                highestDmg = dmg
                highestDmgWeapon = w
            }
        }

        return highestDmgWeapon
    }

    // Calculate scaled damage return value based on agility
    // Formula: FinalReturn = BaseReturn * (1 + Agility / 100)
    getDamageReturnValue(agility, chipID) {
        var baseMin = 0
        var baseMax = 0

        if (chipID == CHIP_MIRROR) {
            baseMin = 5
            baseMax = 6
        } else if (chipID == CHIP_THORN) {
            baseMin = 3
            baseMax = 4
        } else {
            return 0
        }

        var baseAvg = (baseMin + baseMax) / 2.0
        return baseAvg * (1 + agility / 100.0)
    }

    // Estimate total return damage per turn based on expected enemy DPS
    // This helps prioritize return chip application
    estimateReturnDamagePerTurn(agility, chipID, estimatedEnemyDPS) {
        var returnPct = this.getDamageReturnValue(agility, chipID) / 100.0
        return estimatedEnemyDPS * returnPct
    }
}