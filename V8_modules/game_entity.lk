class Entity {
    _cellPos = 0
    _maxHealth = 0
    _currHealth = 0
    _weapons = []
    _inUseWeapon = -1
    _chips = []
    _id = -1
    _strength = 0
    _resistance = 0
    _agility = 0
    _wisdom = 0
    _science = 0
    _magic = 0
    _relShield = 0
    _absShield = 0
    _cores = 0
    _ram = 0
    _frequency = 0
    _currMp = 0
    _maxMp = 0
    _currTp = 0
    _maxTp = 0
    _statuses = []
    _effectsActive = [] // runtime active effects from getEffects
    _isAlive = true

    constructor(cellPos) {
        this._cellPos = cellPos

        this._id = getEntityOnCell(cellPos)
        this._maxHealth = getTotalLife(this._id)
        this._currHealth = getLife(this._id)
        this._weapons = getWeapons(this._id)
        this._inUseWeapon = getWeapon(this._id)
        this._chips = getChips(this._id)
        this._strength = getStrength(this._id)
        this._resistance = getResistance(this._id)
        this._agility = getAgility(this._id)
        this._wisdom = getWisdom(this._id)
        this._science = getScience(this._id)
        this._magic = getMagic(this._id)
        this._relShield = getRelativeShield(this._id)
        this._absShield = getAbsoluteShield(this._id)
        this._cores = getCores(this._id)
        this._ram = getRAM(this._id)
        this._frequency = getFrequency(this._id)
        this._currMp = getMP(this._id)
        this._maxMp = getTotalMP(this._id)
        this._currTp = getTP(this._id)
        this._maxTp = getTotalTP(this._id)
        this._statuses = getStates(this._id)
        this._isAlive = isAlive(this._id)
    }

    updateEntity() {
        debug("Updating entity " + getName(this._id))
        debug("Cell pos was " + this._cellPos + ", now " + getCell(this._id))

        this._cellPos = getCell(this._id)
        this._currHealth = getLife(this._id)
        this._maxHealth = getTotalLife(this._id)
        this._inUseWeapon = getWeapon(this._id)
        this._currMp = getMP(this._id)
        this._currTp = getTP(this._id)
        this._statuses = getStates(this._id)
        this._isAlive = isAlive(this._id)
        this._relShield = getRelativeShield(this._id)
        this._absShield = getAbsoluteShield(this._id)
        // Refresh active effects each turn to detect antidote removals
        this._effectsActive = getEffects(this._id)
    }

    // Get full effect data for an effect ID
    // Returns: [effectID, value, duration] or null if not active
    getEffect(effectId) {
        if (this._effectsActive == null) return null
        for (var e in this._effectsActive) {
            if (e[0] == effectId) return e
        }
        return null
    }

    hasEffect(effectId) {
        return this.getEffect(effectId) != null
    }

    getEffectRemaining(effectId) {
        var effect = this.getEffect(effectId)
        if (effect == null) return 0
        // Assume structure [effectID, value, remainingDuration]
        if (count(effect) >= 3) return effect[2]
        // Fallback if duration not present
        return 1
    }

    // Check if entity has damage return buff active
    hasDamageReturn() {
        return this.hasEffect(EFFECT_DAMAGE_RETURN)
    }

    // Get remaining turns of damage return buff
    getDamageReturnRemaining() {
        return this.getEffectRemaining(EFFECT_DAMAGE_RETURN)
    }

    // Check if entity is invulnerable (boss fight Protection divine)
    // Invulnerability is indicated by absolute shield effect or specific invulnerability buff
    isInvulnerable() {
        // Check for absolute shield at max value (indicates invulnerability)
        if (this._absShield >= 9999) return true

        // Check for invulnerability effect (EFFECT_ABSOLUTE_SHIELD at high values)
        if (this.hasEffect(EFFECT_ABSOLUTE_SHIELD)) {
            var shieldValue = this.getEffectValue(EFFECT_ABSOLUTE_SHIELD)
            if (shieldValue >= 9999) return true
        }

        return false
    }

    // Get effect value (not just duration)
    getEffectValue(effectId) {
        var effect = this.getEffect(effectId)
        if (effect == null) return 0
        // Assume structure [effectID, value, remainingDuration]
        if (count(effect) >= 2) return effect[1]
        return 0
    }
}

class Player extends Entity {
    constructor(cellPos) {
        super(cellPos);
    }
}

class Enemy extends Entity {
    constructor(cellPos) {
        super(cellPos);
    }
}

class Chest extends Entity {
    constructor(cellPos) {
        super(cellPos);
    }
}