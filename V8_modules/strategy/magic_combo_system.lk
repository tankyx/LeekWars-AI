// ====================================================================
// GRAPPLE-COVID COMBO SYSTEM
// ====================================================================
// High-damage burst combo: GRAPPLE → COVID → BOXING_GLOVE → (optional) BALL_AND_CHAIN
// Total: 13-18 TP depending on BALL_AND_CHAIN availability

class ComboSystem {
    // Check if target is within COVID's natural range (0-2 cells)
    static isWithinCovidRange(targetPos) {
        var dist = getCellDistance(player._cellPos, targetPos)
        return (dist != null && dist >= 0 && dist <= 2)
    }

    // Find optimal cell for GRAPPLE-COVID combo (range 3-8, same line, LOS)
    static findGrappleCovidCell(target) {
        var bestCell = -1
        var bestScore = -1

        var reachableCells = fieldMap.getAccessibleCells(player)
        for (var i = 0; i < count(reachableCells); i++) {
            var cell = reachableCells[i]
            var dist = getCellDistance(cell, target._cellPos)

            // Must be in 3-8 range
            if (dist == null || dist < 3 || dist > 8) continue

            // Must be on same line
            if (!isOnSameLine(cell, target._cellPos)) continue

            // Must have line of sight
            if (!lineOfSight(cell, target._cellPos)) continue

            // Score: prefer 5-6 range (middle of 3-8), closer to current position
            var rangeScore = 100 - abs(dist - 5.5) * 10
            var pathLen = getPathLength(player._cellPos, cell)
            if (pathLen == null) continue
            var pathScore = 50 - pathLen
            var totalScore = rangeScore + pathScore

            if (totalScore > bestScore) {
                bestScore = totalScore
                bestCell = cell
            }
        }

        return bestCell
    }

    // Check if GRAPPLE-COVID combo is available and viable
    static canUseGrappleCovidCombo(target) {
        var dist = getCellDistance(player._cellPos, target._cellPos)
        debug("[GRAPPLE-COVID][CHECK] Starting check: playerPos=" + player._cellPos + " targetPos=" + target._cellPos + " dist=" + dist + " TP=" + player._currTp)

        // Must be 3-8 range
        if (dist == null || dist < 3 || dist > 8) {
            debug("[GRAPPLE-COVID][CHECK] FAIL: Distance out of range (need 3-8, got " + dist + ")")
            return false
        }

        // Need minimum 13 TP for core combo
        if (player._currTp < 13) {
            debug("[GRAPPLE-COVID][CHECK] FAIL: Insufficient TP (need 13 minimum, have " + player._currTp + ")")
            return false
        }

        // Check core chips equipped
        var hasGrapple = mapContainsKey(arsenal.playerEquippedChips, CHIP_GRAPPLE)
        var hasCovid = mapContainsKey(arsenal.playerEquippedChips, CHIP_COVID)
        var hasBoxing = mapContainsKey(arsenal.playerEquippedChips, CHIP_BOXING_GLOVE)
        debug("[GRAPPLE-COVID][CHECK] Chips equipped: GRAPPLE=" + hasGrapple + " COVID=" + hasCovid + " BOXING=" + hasBoxing)

        if (!hasGrapple || !hasCovid || !hasBoxing) {
            debug("[GRAPPLE-COVID][CHECK] FAIL: Missing required chips")
            return false
        }

        // Check cooldowns
        var cdGrapple = getCooldown(CHIP_GRAPPLE, player._id)
        var cdCovid = getCooldown(CHIP_COVID, player._id)
        var cdBoxing = getCooldown(CHIP_BOXING_GLOVE, player._id)
        debug("[GRAPPLE-COVID][CHECK] Cooldowns: GRAPPLE=" + cdGrapple + " COVID=" + cdCovid + " BOXING=" + cdBoxing)

        if (cdGrapple > 0 || cdCovid > 0 || cdBoxing > 0) {
            debug("[GRAPPLE-COVID][CHECK] FAIL: Core chips on cooldown")
            return false
        }

        // Must be on same line
        var sameLine = isOnSameLine(player._cellPos, target._cellPos)
        debug("[GRAPPLE-COVID][CHECK] Same line check: " + sameLine)
        if (!sameLine) {
            debug("[GRAPPLE-COVID][CHECK] FAIL: Not on same line")
            return false
        }

        // Check line of sight
        var hasLOS = lineOfSight(player._cellPos, target._cellPos)
        debug("[GRAPPLE-COVID][CHECK] Line of sight check: " + hasLOS)
        if (!hasLOS) {
            debug("[GRAPPLE-COVID][CHECK] FAIL: No line of sight")
            return false
        }

        debug("[GRAPPLE-COVID][CHECK] SUCCESS: All conditions met!")
        return true
    }

    // Execute GRAPPLE → COVID → (optional BALL_AND_CHAIN) → BOXING_GLOVE combo
    static executeGrappleCovidCombo(target) {
        var enemyPos = target._cellPos
        var playerPos = player._cellPos
        var tpCost = 13  // Base: GRAPPLE(3) + COVID(8) + BOXING(2)

        // Check if BALL_AND_CHAIN is available
        var hasBNC = mapContainsKey(arsenal.playerEquippedChips, CHIP_BALL_AND_CHAIN)
        var cdBNC = hasBNC ? getCooldown(CHIP_BALL_AND_CHAIN, player._id) : 1
        var includeBNC = hasBNC && cdBNC == 0 && player._currTp >= 18
        if (includeBNC) tpCost = 18

        debug("[GRAPPLE-COVID] Starting " + tpCost + " TP combo from range " + getCellDistance(playerPos, enemyPos) + " (BNC=" + includeBNC + ")")

        // Calculate direction vector
        var dx = getCellX(playerPos) - getCellX(enemyPos)
        var dy = getCellY(playerPos) - getCellY(enemyPos)
        if (dx != 0) dx = dx / abs(dx)
        if (dy != 0) dy = dy / abs(dy)

        // 1. GRAPPLE (4 TP) - target cell 2 cells toward enemy
        var grappleTargetX = getCellX(playerPos) - dx * 2
        var grappleTargetY = getCellY(playerPos) - dy * 2
        var grappleCell = getCellFromXY(grappleTargetX, grappleTargetY)
        if (grappleCell == null) {
            grappleTargetX = getCellX(playerPos) - dx
            grappleTargetY = getCellY(playerPos) - dy
            grappleCell = getCellFromXY(grappleTargetX, grappleTargetY)
        }
        if (grappleCell == null) grappleCell = playerPos

        debug("[GRAPPLE-COVID] Step 1: GRAPPLE (3 TP) - pulling enemy from " + enemyPos + " toward " + grappleCell)
        useChipOnCell(CHIP_GRAPPLE, grappleCell)
        player._currTp -= 3

        // Update enemy position after GRAPPLE
        target.updateEntity()
        var newEnemyPos = target._cellPos
        debug("[GRAPPLE-COVID] Enemy pulled to: " + newEnemyPos)

        // 2. COVID (8 TP) - uncleansable poison
        debug("[GRAPPLE-COVID] Step 2: COVID (8 TP) on cell " + newEnemyPos)
        useChipOnCell(CHIP_COVID, newEnemyPos)
        player._currTp -= 8

        // 3. BOXING_GLOVE (2 TP) - push enemy away
        var enemyX = getCellX(newEnemyPos)
        var enemyY = getCellY(newEnemyPos)
        var playerX = getCellX(playerPos)
        var playerY = getCellY(playerPos)

        var isHorizontal = (enemyY == playerY)
        var isVertical = (enemyX == playerX)

        var boxingCell = null

        if (isHorizontal) {
            var pushDir = (enemyX > playerX) ? 1 : -1
            for (var pushDist = 8; pushDist >= 1; pushDist--) {
                var testX = enemyX + pushDir * pushDist
                var testCell = getCellFromXY(testX, enemyY)
                if (testCell != null && lineOfSight(newEnemyPos, testCell)) {
                    boxingCell = testCell
                    debug("[GRAPPLE-COVID] BOXING_GLOVE: horizontal push to " + testCell + " (dist=" + pushDist + ")")
                    break
                }
            }
        } else if (isVertical) {
            var pushDir = (enemyY > playerY) ? 1 : -1
            for (var pushDist = 8; pushDist >= 1; pushDist--) {
                var testY = enemyY + pushDir * pushDist
                var testCell = getCellFromXY(enemyX, testY)
                if (testCell != null && lineOfSight(newEnemyPos, testCell)) {
                    boxingCell = testCell
                    debug("[GRAPPLE-COVID] BOXING_GLOVE: vertical push to " + testCell + " (dist=" + pushDist + ")")
                    break
                }
            }
        } else {
            debug("[GRAPPLE-COVID] ERROR: Enemy not on horizontal/vertical line - BOXING_GLOVE will fail!")
            boxingCell = newEnemyPos
        }

        if (boxingCell == null) boxingCell = newEnemyPos

        debug("[GRAPPLE-COVID] Step 3: BOXING_GLOVE (2 TP) - pushing from " + newEnemyPos + " toward " + boxingCell)
        useChipOnCell(CHIP_BOXING_GLOVE, boxingCell)
        player._currTp -= 2

        // Update enemy position after push
        target.updateEntity()
        var pushedEnemyPos = target._cellPos
        debug("[GRAPPLE-COVID] Enemy pushed to: " + pushedEnemyPos)

        // 4. BALL_AND_CHAIN (5 TP) - optional MP debuff
        if (includeBNC) {
            debug("[GRAPPLE-COVID] Step 4: BALL_AND_CHAIN (5 TP) on cell " + pushedEnemyPos)
            useChipOnCell(CHIP_BALL_AND_CHAIN, pushedEnemyPos)
            player._currTp -= 5
        } else {
            debug("[GRAPPLE-COVID] Step 4: BALL_AND_CHAIN skipped (cd=" + cdBNC + " or insufficient TP)")
        }

        debug("[GRAPPLE-COVID] Combo complete! TP remaining: " + player._currTp)
        return true
    }
}
