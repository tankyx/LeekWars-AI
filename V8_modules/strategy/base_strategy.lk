include('action.lk')

class Strategy {
    _actions = []
    _playerTP = -1
    _fieldMap = null

    constructor() {
        this._playerTP = getTP()
    }

    // Helper to centralize repeated distance and line-of-sight checks.
    inRangeAndLOS(fromCell, targetCell, minR, maxR) {
        var dist = getCellDistance(fromCell, targetCell)
        if (dist < minR || dist > maxR) return false
        if (!lineOfSight(fromCell, targetCell)) return false
        return true
    }

    turnOneBuffs() {
        debug("Applying turn one buffs if available")
        debug("Dumping equipped chips:")
        for (var c in mapKeys(arsenal.playerEquippedChips)) {
            debug(" - " + getChipName(c))
        }

        // PRIORITY 1: Stat-based primary buffs (applied before other buffs for maximum effect)
        // Strength build: Apply CHIP_STEROID for weapon damage boost
        if (player._strength >= player._agility && player._strength >= player._magic) {
            if (mapContainsKey(arsenal.playerEquippedChips, CHIP_STEROID)) {
                debug("Using CHIP_STEROID (strength build) - +150-170 Strength for 3 turns")
                useChip(CHIP_STEROID, player._id)
            }
        }

        // Agility build: Apply CHIP_WARM_UP before damage return buffs
        if (player._agility >= player._strength && player._agility >= player._magic) {
            if (mapContainsKey(arsenal.playerEquippedChips, CHIP_WARM_UP)) {
                debug("Using CHIP_WARM_UP (agility build) - +170-190 Agility for 3 turns")
                useChip(CHIP_WARM_UP, player._id)
            }
            // Then apply damage return for tanky playstyle
            if (mapContainsKey(arsenal.playerEquippedChips, CHIP_MIRROR)) {
                debug("Using CHIP_MIRROR (agility build) - Damage return")
                useChip(CHIP_MIRROR, player._id)
            }
        }

        // PRIORITY 2: Universal stat buffs
        if (mapContainsKey(arsenal.playerEquippedChips, CHIP_KNOWLEDGE)) {
            debug("Using CHIP_KNOWLEDGE - Science/Magic boost")
            useChip(CHIP_KNOWLEDGE, player._id)
        }
        if (mapContainsKey(arsenal.playerEquippedChips, CHIP_ARMORING)) {
            debug("Using CHIP_ARMORING - Resistance boost")
            useChip(CHIP_ARMORING, player._id)
        }
        if (mapContainsKey(arsenal.playerEquippedChips, CHIP_ELEVATION)) {
            debug("Using CHIP_ELEVATION - Wisdom boost")
            useChip(CHIP_ELEVATION, player._id)
        }

        // PRIORITY 3: Weapon selection
        if (getWeapon() == null) {
            setWeapon(arsenal.getHighestDamageWeapon())
        }

        // NOTE: CHIP_ADRENALINE is reserved for tactical mid-combat usage (not turn 1)
        // NOTE: CHIP_LEATHER_BOOTS is reserved for positioning scenarios (not turn 1)
    }

    createMovementAction(type, targetHitCellID, target) {
        push(this._actions, new Action(
            type,
            -1,
            -1,
            targetHitCellID,
            target
        ))
        debug("Planned movement action: Type " + type + " to cell " + targetHitCellID + " towards entity " + getName(target._id))
    }

    createAttackAction(type, target, weaponID = -1, chipID = -1) {
        push(this._actions, new Action(
            type,
            weaponID,
            chipID,
            target._cellPos,
            target
        ))
        debug("Planned attack action: Type " + type + " on entity " + getName(target._id) + " with weapon " + getWeaponName(weaponID) + " and chip " + getChipName(chipID))
    }

    createOffensiveScenario(target, targetHitCell) {
        // If magic oriented, optionally re-select target cell giving higher weight to DoT
        if (player._magic > player._strength) {
            // heuristic weights: treat total DoT as 1.5x direct for magic builds
            var weightedCell = fieldMap.getBestWeightedDamageCell(1.5, 1)
            if (weightedCell != -1) {
                targetHitCell = weightedCell
            }
        }
        // BEFORE committing to original target cell, see if an approach-hide cell is superior (can still attack + less danger)
        var hnsApproach = fieldMap.findApproachHideAndSeekCell(target)
        if (hnsApproach != null) {
            // Replace target cell if it allows attack or if original target not set
            var adopt = false
            if (hnsApproach['canAttack'] || targetHitCell == -1) adopt = true
            else if (targetHitCell != -1 && targetHitCell != null) {
                // If current target has same total damage but is farther, adopt HNS
                if (mapContainsKey(fieldMap.damageMap, hnsApproach['cell']) && mapContainsKey(fieldMap.damageMap, targetHitCell._id)) {
                    var hCellObj = fieldMap.damageMap[hnsApproach['cell']]
                    if (hCellObj._totalDamage == targetHitCell._totalDamage) {
                        var distCurrent = getPathLength(player._cellPos, targetHitCell._id)
                        var distH = getPathLength(player._cellPos, hCellObj._id)
                        if (distH != null && distCurrent != null && distH < distCurrent) adopt = true
                    }
                }
            }
            if (adopt) {
                if (targetHitCell != -1 && targetHitCell != null && targetHitCell._id != hnsApproach['cell']) {
                    debug("[HNS-APPROACH] Replacing offensive target cell with safer approach cell " + hnsApproach['cell'])
                }
                // Wrap chosen id into existing cell object if present in damageMap
                if (mapContainsKey(fieldMap.damageMap, hnsApproach['cell'])) {
                    targetHitCell = fieldMap.damageMap[hnsApproach['cell']]
                } else {
                    // Fallback: fabricate minimal Cell proxy with id for movement if not a damage cell
                    targetHitCell = new Cell(hnsApproach['cell'], false, -1, 0, 0, false, -1, -1)
                }
            }
        }
        // First, we check if we can reach the target hit cell
        var playerPos = player._cellPos
        var playerMP = player._currMp
        var playerTP = player._currTp
        var pathLength = getPathLength(playerPos, targetHitCell._id)

        debug("Player position: " + playerPos)
        debug("Player MP: " + playerMP + " Player TP: " + playerTP)
        debug("Path length to target hit cell: " + pathLength)

        if (pathLength > playerMP) {
            // Can't reach the target hit cell, we move as close as possible
            createMovementAction(Action.MOVEMENT_APPROACH, targetHitCell._id, target)
            debug("Can't reach target hit cell, moving as close as possible")
            return;
        }
        // We can reach the target hit cell, move only if not already there
        if (pathLength > 0) {
            createMovementAction(Action.MOVEMENT_OFFENSIVE, targetHitCell._id, target)
        } else {
            debug("Already on optimal offensive cell (" + targetHitCell._id + ") skipping movement")
        }

        playerPos = targetHitCell._id
        playerMP -= pathLength

        // Decide primary offensive resource (weapon or chip) based on cell best type
        if (targetHitCell._bestType == 0 && targetHitCell._highestDamageWeapon != -1) {
            // Weapon path
            if (getWeapon() != targetHitCell._highestDamageWeapon._id) {
                if (playerTP < 1 + targetHitCell._highestDamageWeapon._cost) {
                    debug("Not enough TP to swap and use weapon " + getWeaponName(targetHitCell._highestDamageWeapon._id))
                } else {
                    createAttackAction(Action.ACTION_WEAPON_SWAP, target, targetHitCell._highestDamageWeapon._id, -1)
                    playerTP -= 1
                }
            }
            var useCount = targetHitCell._highestDamageWeapon._maxUse
            while (playerTP >= targetHitCell._highestDamageWeapon._cost && useCount > 0) {
                createAttackAction(Action.ACTION_DIRECT, target, targetHitCell._highestDamageWeapon._id, -1)
                playerTP -= targetHitCell._highestDamageWeapon._cost
                useCount -= 1
            }
        }
        else if (targetHitCell._bestType == 1 && targetHitCell._highestDamageChip != -1) {
            // Chip path
            var chipRef = targetHitCell._highestDamageChip
            // Use chip as many times as allowed by TP and maxUse
            var chipUses = chipRef._maxUse
            while (playerTP >= chipRef._cost && chipUses > 0) {
                createAttackAction(Action.ACTION_DIRECT, target, -1, chipRef._id)
                playerTP -= chipRef._cost
                chipUses -= 1
            }
        }

        // No more TP or uses on primary weapon; evaluate other weapons
        var primaryWid = -1
        if (targetHitCell._highestDamageWeapon != -1 && targetHitCell._highestDamageWeapon != null) primaryWid = targetHitCell._highestDamageWeapon._id
        var weaponIds = mapKeys(arsenal.playerEquippedWeapons)
        for (var wi = 0; wi < count(weaponIds); wi++) {
            var wid = weaponIds[wi]
            var wObj = arsenal.playerEquippedWeapons[wid]
            if (wObj == null) continue
            if (wObj._id == primaryWid) continue
            if (playerTP < wObj._cost + 1) {
                debug("Skipping weapon " + getWeaponName(wObj._id) + " since not enough TP for swap and use")
                continue
            }
            debug("Checking weapon " + getWeaponName(wObj._id) + " for possible use")
            var secondHitCell = fieldMap.getClosestHitCellForWeapon(wObj)
            if (secondHitCell == -1) {
                debug("No reachable hit cell found for weapon " + getWeaponName(wObj._id))
                continue
            }
            var secondPathLength = getPathLength(playerPos, secondHitCell._id)
            if (secondPathLength != null && secondPathLength <= playerMP) {
                if (secondPathLength > 0) {
                    createMovementAction(Action.MOVEMENT_OFFENSIVE, secondHitCell._id, target)
                    playerMP -= secondPathLength
                } else {
                    debug("Already on secondary weapon cell for " + getWeaponName(wObj._id))
                }
                createAttackAction(Action.ACTION_WEAPON_SWAP, target, wObj._id, -1)
                playerTP -= 1
                while (playerTP >= wObj._cost) {
                    createAttackAction(Action.ACTION_DIRECT, target, wObj._id, -1)
                    playerTP -= wObj._cost
                }
            }
        }

        // Consider spare TP for secondary source (weapon after chip or chip after weapon)
        if (playerTP > 0) {
            if (targetHitCell._bestType == 0) {
                // After weapon usage, try damaging chips
                for (var c in arsenal.playerEquippedChips) {
                    if (playerTP < c._cost) continue
                    if (!mapContainsKey(c._effects, EFFECT_DAMAGE) && !mapContainsKey(c._effects, EFFECT_POISON)) continue
                    createAttackAction(Action.ACTION_DIRECT, target, -1, c._id)
                    playerTP -= c._cost
                }
            } else {
                // After chip usage, attempt remaining weapon attacks with current or swap if efficient
                var activeWeapon = getWeapon()
                if (activeWeapon != null && mapContainsKey(arsenal.playerEquippedWeapons, activeWeapon)) {
                    var aw = arsenal.playerEquippedWeapons[activeWeapon]
                    var useCount2 = aw._maxUse
                    while (playerTP >= aw._cost && useCount2 > 0) {
                        createAttackAction(Action.ACTION_DIRECT, target, aw._id, -1)
                        playerTP -= aw._cost
                        useCount2 -= 1
                    }
                }
            }
        }

        // Post-offensive Hide & Seek: attempt to relocate to a safer cell with remaining MP
        // playerMP tracks remaining MP after initial approach earlier in this function.
        if (playerMP > 0) {
            var hnsInfo = fieldMap.findHideAndSeekCell()
            if (hnsInfo != null) {
                var hideCellId = hnsInfo['cell']
                if (hideCellId != targetHitCell._id) {
                    var legLen = getPathLength(targetHitCell._id, hideCellId)
                    if (legLen != null && legLen <= playerMP) {
                        debug("[HNS] Scheduling post-attack hide move to cell " + hideCellId + " danger=" + hnsInfo['danger'])
                        createMovementAction(Action.MOVEMENT_HNS, hideCellId, target)
                        playerMP -= legLen
                    } else if (legLen != null) {
                        debug("[HNS] Can't reach hide cell after attack (need " + legLen + " have " + playerMP + ")")
                    }
                } else {
                    debug("[HNS] Attack cell already optimal hide cell (danger=" + hnsInfo['danger'] + ")")
                }
            }
        }
    }

    // Shared weapon-focused combat logic for Strength and Agility strategies
    // Returns map with remaining MP/TP after combat
    // chipExclusionList: chips to exclude from damage chip usage (e.g., CHIP_MIRROR/THORN for agility)
    executeWeaponFocusedOffensive(target, bestWeaponCell, playerPos, playerMP, playerTP, chipExclusionList, debugPrefix) {
        var currentWeaponId = getWeapon()  // Track currently equipped weapon

        // HNS-approach cell check (safer positioning)
        var hnsApproach = fieldMap.findApproachHideAndSeekCell(target)
        if (hnsApproach != null && hnsApproach['canAttack'] && mapContainsKey(fieldMap.damageMap, hnsApproach['cell'])) {
            var hCellObj = fieldMap.damageMap[hnsApproach['cell']]
            if (hCellObj._highestDamageWeapon != -1) {
                var distOrig = getPathLength(playerPos, bestWeaponCell._id)
                var distH = getPathLength(playerPos, hCellObj._id)
                if (distH != null && distOrig != null && hCellObj._weaponDamage >= bestWeaponCell._weaponDamage && distH < distOrig) {
                    debug("[" + debugPrefix + "][HNS-APPROACH] Switching weapon cell to safer/closer cell " + hCellObj._id)
                    bestWeaponCell = hCellObj
                }
            }
        }

        // Movement to weapon cell
        var pathLen = getPathLength(playerPos, bestWeaponCell._id)
        if (pathLen == null) pathLen = 99999
        debug("[" + debugPrefix + "] Movement check: pathLen=" + pathLen + " playerMP=" + playerMP + " bestWeaponCell=" + bestWeaponCell._id + " playerPos=" + playerPos)
        var reachedWeaponCell = false
        if (pathLen > playerMP) {
            // Move as close as possible (unreachable this turn)
            this.createMovementAction(Action.MOVEMENT_APPROACH, bestWeaponCell._id, target)
            debug("[" + debugPrefix + "] Approaching weapon cell (unreachable this turn) cell=" + bestWeaponCell._id)

            // Execute movement immediately to get actual position
            this.executeAndFlushActions()
            playerPos = player._cellPos
            playerMP = player._currMp
            playerTP = player._currTp
            currentWeaponId = getWeapon()  // Update current weapon after execution
            debug("[" + debugPrefix + "] After movement execution: pos=" + playerPos + " MP=" + playerMP + " TP=" + playerTP + " weapon=" + getWeaponName(currentWeaponId))

        } else if (pathLen > 0) {
            this.createMovementAction(Action.MOVEMENT_OFFENSIVE, bestWeaponCell._id, target)
            playerMP -= pathLen
            playerPos = bestWeaponCell._id
            reachedWeaponCell = true
        } else {
            debug("[" + debugPrefix + "] Already on best weapon cell " + bestWeaponCell._id)
            reachedWeaponCell = true
        }

        debug("[" + debugPrefix + "] After movement logic: reachedWeaponCell=" + reachedWeaponCell + " playerPos=" + playerPos + " playerMP=" + playerMP)

        // Primary weapon usage (only if we reached the weapon cell)
        var primaryWeapon = bestWeaponCell._highestDamageWeapon
        debug("[" + debugPrefix + "] Primary weapon: reachedWeaponCell=" + reachedWeaponCell + " primaryWeapon=" + (primaryWeapon != -1 && primaryWeapon != null ? getWeaponName(primaryWeapon._id) : "none") + " currentWeapon=" + getWeaponName(currentWeaponId) + " playerTP=" + playerTP)
        if (reachedWeaponCell && primaryWeapon != -1 && primaryWeapon != null) {
            if (currentWeaponId != primaryWeapon._id) {
                debug("[" + debugPrefix + "] Need weapon swap: current=" + getWeaponName(currentWeaponId) + " -> target=" + getWeaponName(primaryWeapon._id) + " (TP=" + playerTP + " need=" + (1 + primaryWeapon._cost) + ")")
                if (playerTP >= 1 + primaryWeapon._cost) {
                    this.createAttackAction(Action.ACTION_WEAPON_SWAP, target, primaryWeapon._id, -1)
                    playerTP -= 1
                    currentWeaponId = primaryWeapon._id  // Track weapon swap
                    debug("[" + debugPrefix + "] Created weapon swap action")
                } else {
                    debug("[" + debugPrefix + "] Not enough TP to swap and use primary weapon " + getWeaponName(primaryWeapon._id))
                }
            } else {
                debug("[" + debugPrefix + "] Weapon already equipped: " + getWeaponName(currentWeaponId))
            }
            var uses = primaryWeapon._maxUse
            while (playerTP >= primaryWeapon._cost && uses > 0) {
                this.createAttackAction(Action.ACTION_DIRECT, target, primaryWeapon._id, -1)
                playerTP -= primaryWeapon._cost
                uses -= 1
            }
        } else if (!reachedWeaponCell) {
            debug("[" + debugPrefix + "] Did not reach weapon cell - will use weapons from current position " + playerPos)
        }

        // Secondary weapons (use weapons available from current position)
        var primaryWid = (reachedWeaponCell && primaryWeapon != -1 && primaryWeapon != null) ? primaryWeapon._id : -1
        var curCellObj = null
        if (mapContainsKey(fieldMap.damageMap, playerPos)) {
            curCellObj = fieldMap.damageMap[playerPos]
        }

        if (curCellObj != null && count(curCellObj._weaponsList) > 0) {
            // Use weapons directly from cell's _weaponsList (already pre-calculated)
            for (var wL = 0; wL < count(curCellObj._weaponsList); wL++) {
                var wObj = curCellObj._weaponsList[wL]
                if (wObj == null) continue
                if (wObj._id == primaryWid) continue  // Skip primary weapon (already used)
                if (playerTP < wObj._cost) continue  // Need at least weapon cost

                // Only swap if weapon not already equipped
                if (currentWeaponId != wObj._id) {
                    if (playerTP < 1) continue  // Need 1 TP for swap
                    this.createAttackAction(Action.ACTION_WEAPON_SWAP, target, wObj._id, -1)
                    playerTP -= 1
                    currentWeaponId = wObj._id  // Track weapon swap
                }

                var uses2 = wObj._maxUse
                while (playerTP >= wObj._cost && uses2 > 0) {
                    this.createAttackAction(Action.ACTION_DIRECT, target, wObj._id, -1)
                    playerTP -= wObj._cost
                    uses2 -= 1
                }
            }
        } else {
            debug("[" + debugPrefix + "] No weapons available from current position " + playerPos)
        }

        // Spend leftover TP on damage/poison chips (use chips available from current position)
        if (playerTP > 0 && curCellObj != null && count(curCellObj._chipsList) > 0) {
            var dmgChips = []
            // Use chips directly from cell's _chipsList (already pre-calculated with range/LOS)
            for (var cL = 0; cL < count(curCellObj._chipsList); cL++) {
                var chipObj = curCellObj._chipsList[cL]
                if (chipObj == null) continue

                // Skip excluded chips (e.g., CHIP_MIRROR/THORN for agility)
                var excluded = false
                for (var ex = 0; ex < count(chipExclusionList); ex++) {
                    if (chipObj._id == chipExclusionList[ex]) {
                        excluded = true
                        break
                    }
                }
                if (excluded) continue

                // Filter attack chips (damage or poison effects)
                if (!mapContainsKey(chipObj._effects, EFFECT_DAMAGE) && !mapContainsKey(chipObj._effects, EFFECT_POISON)) continue

                var bd = arsenal.getDamageBreakdown(player._strength, player._magic, player._wisdom, chipObj._id)
                push(dmgChips, ['chip': chipObj, 'per': bd['total']])
            }

            // Selection sort descending by per-use total damage
            for (var i = 0; i < count(dmgChips); i++) {
                var bestIdx = i
                for (var j = i + 1; j < count(dmgChips); j++) {
                    if (dmgChips[j]['per'] > dmgChips[bestIdx]['per']) bestIdx = j
                }
                if (bestIdx != i) {
                    var tmp = dmgChips[i]
                    dmgChips[i] = dmgChips[bestIdx]
                    dmgChips[bestIdx] = tmp
                }
            }

            for (var dc = 0; dc < count(dmgChips); dc++) {
                var rec = dmgChips[dc]
                var chipUse = rec['chip']
                if (playerTP < chipUse._cost) continue
                // Spam chip until max uses OR TP exhausted
                var actualUsesC = 0
                while (actualUsesC < chipUse._maxUse && playerTP >= chipUse._cost) {
                    this.createAttackAction(Action.ACTION_DIRECT, target, -1, chipUse._id)
                    playerTP -= chipUse._cost
                    actualUsesC += 1
                }
                if (playerTP <= 0) break
            }
        }

        // Post-offensive HNS relocation (break line of sight with remaining MP)
        if (playerMP > 0) {
            var hnsInfo = fieldMap.findHideAndSeekCell()
            if (hnsInfo != null) {
                var hideCellId = hnsInfo['cell']
                if (hideCellId != playerPos) {
                    var legLen = getPathLength(playerPos, hideCellId)
                    if (legLen != null && legLen <= playerMP) {
                        debug("[" + debugPrefix + "][HNS] Adding hide move to cell " + hideCellId + " danger=" + hnsInfo['danger'])
                        this.createMovementAction(Action.MOVEMENT_HNS, hideCellId, target)
                        playerMP -= legLen
                    }
                }
            }
        }

        return ['playerMP': playerMP, 'playerTP': playerTP]
    }

    // Base defensive scenario usable by all strategies
    createDefensiveScenario(target, targetHitCell) {
        // Optional self-heal before moving away if chip is equipped and usable
        if (mapContainsKey(arsenal.playerEquippedChips, CHIP_REGENERATION)) {
            var regenChip = arsenal.playerEquippedChips[CHIP_REGENERATION]
            if (getCooldown(CHIP_REGENERATION, getEntity()) == 0 && getTP() >= regenChip._cost && getLife() < getTotalLife()) {
                this.createAttackAction(Action.ACTION_DIRECT, player, -1, CHIP_REGENERATION)
            }
        }

        // Move away from the target using available MP (builtin API)
        // Attempt hide-and-seek cell first (safer than a simple flee if available)
        var hns = fieldMap.findHideAndSeekCell()
        if (hns != null) {
            var hCell = hns['cell']
            if (hCell != player._cellPos) {
                debug("[HNS] Executing defensive hide movement to cell " + hCell + " safe=" + hns['safe'] + " danger=" + hns['danger'])
                this.createMovementAction(Action.MOVEMENT_HNS, hCell, target)
            } else {
                debug("[HNS] Current cell already chosen as best hide cell (danger=" + hns['danger'] + ")")
            }
        } else {
            var usedMp = moveAwayFrom(target._id)
            debug("moveAwayFrom used MP: " + usedMp)
        }

        // After moving, refresh
        player.updateEntity()
        fieldMap.updateMapEntities()

        // Try to shoot any available weapon from the new cell
        var playerPos = player._cellPos
        var playerTP = player._currTp

        if (mapContainsKey(fieldMap.damageMap, playerPos)) {
            var cell = fieldMap.damageMap[playerPos]
            if (cell._highestDamageWeapon != -1) {
                var w = cell._highestDamageWeapon
                var needSwap = (getWeapon() != w._id)

                if (needSwap && playerTP >= 1) {
                    this.createAttackAction(Action.ACTION_WEAPON_SWAP, target, w._id, -1)
                    playerTP -= 1
                }

                var useCount = w._maxUse
                while (playerTP >= w._cost && useCount > 0) {
                    this.createAttackAction(Action.ACTION_DIRECT, target, w._id, -1)
                    playerTP -= w._cost
                    useCount -= 1
                }
            }
        }
    }

    createAndExecuteDefensiveScenario(target) {
        arrayClear(this._actions)
        this.createDefensiveScenario(target, -1)
        this.executeScenario()
    }

    // If below 35% HP, use defensive; else offensive
    createAndExecuteScenario(target, targetHitCell) {
        arrayClear(this._actions)

        // Check if CHIP_REGENERATION is available (not exhausted)
        var regenAvailable = false
        if (mapContainsKey(arsenal.playerEquippedChips, CHIP_REGENERATION)) {
            var regenCooldown = getCooldown(CHIP_REGENERATION, getEntity())
            // Cooldown 0 = usable, >100 = exhausted (infinite cooldown)
            regenAvailable = (regenCooldown == 0)
            debug("CHIP_REGENERATION cooldown: " + regenCooldown + " (available: " + regenAvailable + ")")
        }

        // Only use defensive scenario if HP low AND we can still heal
        // Otherwise fight offensively (fleeing without healing is pointless)
        // Threshold: 35% HP (getLife() * 100 / getTotalLife() < 35)
        if (getLife() * 100 < getTotalLife() * 35 && regenAvailable) {
            debug("Low HP detected (<35%) and regeneration available, switching to defensive strategy")
            this.createDefensiveScenario(target, targetHitCell)
        } else {
            if (getLife() * 100 < getTotalLife() * 35) {
                debug("Low HP detected (<35%) but regeneration exhausted, fighting offensively")
            }
            this.createOffensiveScenario(target, targetHitCell)
        }
        this.executeScenario()
    }

    executeScenario() {
        for (var a in this._actions) {
            if (a.type == Action.MOVEMENT_APPROACH || a.type == Action.MOVEMENT_OFFENSIVE || a.type == Action.MOVEMENT_DEFENSIVE || a.type == Action.MOVEMENT_OTKO || a.type == Action.MOVEMENT_DOT_OFFENSIVE || a.type == Action.MOVEMENT_DEBUFF) {
                debug("Executing movement (toward) action to cell " + a.targetCell)
                var posBefore = getCell()
                moveTowardCell(a.targetCell)
                var posAfter = getCell()
                debug("Movement result: " + posBefore + " -> " + posAfter + " (target was " + a.targetCell + ")")
            }
            else if (a.type == Action.MOVEMENT_FLEE) {
                debug("Executing flee/kite movement away from entity " + a.targetEntity._id)
                moveAwayFrom(a.targetEntity._id)
            }
            else if (a.type == Action.MOVEMENT_HNS) {
                debug("Executing Hide&Seek movement to cell " + a.targetCell)
                moveTowardCell(a.targetCell)
            }
            else if (a.type == Action.ACTION_WEAPON_SWAP) {
                debug("Swapping to weapon " + getWeaponName(a.weaponId))
                setWeapon(a.weaponId)
            }
            else if (a.type == Action.ACTION_DIRECT || a.type == Action.ACTION_DOT || a.type == Action.ACTION_DEBUFF) {
                var currentPos = getCell()
                var currentWeap = getWeapon()
                var targetPos = a.targetCell
                var dist = getCellDistance(currentPos, targetPos)

                // Debug action contents
                debug("Executing attack action: type=" + a.type + " weaponId=" + a.weaponId + " chip=" + a.chip + " targetCell=" + a.targetCell)

                if (a.chip != -1) {
                    debug("Using chip " + getChipName(a.chip) + " on cell " + a.targetCell + " (TP=" + getTP() + ")")
                    useChipOnCell(a.chip, a.targetCell)
                }
                else {
                    debug("Using weapon " + getWeaponName(a.weaponId) + " on cell " + a.targetCell + " (pos=" + currentPos + " dist=" + dist + " TP=" + getTP() + ")")
                    useWeaponOnCell(a.targetCell)
                }
            }
            else if (a.type == Action.ACTION_BUFF) {
                debug("Executing buff/utility chip " + getChipName(a.chip) + " on entity " + getName(a.targetEntity._id))
                if (a.chip != -1) {
                    useChip(a.chip, a.targetEntity._id)
                }
            }
            else if (a.type == Action.ACTION_TELEPORT) {
                debug("Executing teleportation to cell " + a.targetCell)
                if (a.chip == CHIP_TELEPORTATION) {
                    useChip(a.chip, a.targetCell)
                }
            }
        }
    }

    // Execute all queued actions immediately and update game state
    // Useful when we need to know actual position/resources before continuing scenario planning
    executeAndFlushActions() {
        this.executeScenario()
        arrayClear(this._actions)
        player.updateEntity()
    }
}
